#+TITLE: config.org
#+SUBTITLE: /Λ L M Λ R Λ Z  ★ L Λ B S/
#+AUTHOR: Erik P. Almaraz
#+EMAIL: erik@almarazlabs.com
#+DATE: 2022-07-01 Fri
#+STARTUP: show2levels
#+SETUPFILE: ~/.config/org-files/Templates/latex-export.org
#+PROPERTY: header-args :tangle (let ((org-use-tag-inheritance t)) (if (member "INACTIVE" (org-get-tags)) "no" "~/Projects/website/build-site.el"))

* Documentation

Build Configuration for this website, see [[https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/][System Crafters : Build Your Website with Org Mode]].
See also Emacs Manual on Org Publishing.

I've captured this in my usual Org Babel Notebook type configuration. You will find automation for the `build.sh' needed for this build, as well as the Emacs Lisp build script `build-site.el'.


** Foreword

Each subsection may be tagged with:

- =:INACTIVE: - Content of the section won't be exported=
- =:BUGFIX:   - Section contains (temporary) bug fix code=
- =:FIX:      - Sections needs to be fixed=
- =:REFACTOR: - Section needs to be refactored=
- =:WIP:      - Section is currently a Work In Progress=
- =:noexport: - Content of the section won't be exported (org)=

*** Notes

Org Tags, export settings, etc.

- Setting Tags: C-c C-q (org-set-tags-command)
- Export Settings: SELECT-TAGS "export" and "noexport" (also an EXCLUDE-TAG)
- Clean up echo area pollution from native emacs modules.
  - recentf-cleanup (disable echo area messages) & loading message of recenf file.
  - inhibit-startup-echo-area-message is not working.

** References
:PROPERTIES:
:UNNUMBERED: nil
:END:

 1. Last, F. M., *Title*, /Journal Name Abbrev.,/ YYYY, [[https://github.com/skribest][Link]] .
 2. Last, F. M., *Title*, /Journal Name Abbrev.,/ YYYY, [[https://github.com/skribest][Link]] .
 3. Last, F. M., *Title*, /Journal Name Abbrev.,/ YYYY, [[https://github.com/skribest][Link]] .
 4. Last, F. M., *Title*, /Journal Name Abbrev.,/ YYYY, [[https://github.com/skribest][Link]] .
 5. Last, F. M., *Title*, /Journal Name Abbrev.,/ YYYY, [[https://github.com/skribest][Link]] .


* build.sh
:PROPERTIES:
:header-args:emacs-lisp: :tangle (let ((org-use-tag-inheritance t)) (if (member "INACTIVE" (org-get-tags)) "no" "~/Projects/website/build.sh"))
:ORDERED:  t
:END:

Shell script to run the Emacs Lisp HTML publishing configuration script. Don't forget to make the  script executable with =chmod +x build.sh=...

I am wondering if there is a way to tell Emacs to generate this file, but with the appropriate permissions...

#+BEGIN_SRC sh :tangle "~/Projects/website/build.sh"
  #!/bin/sh
  emacs -Q --script build-site.el

#+END_SRC


* Header (build-site.el)

#+BEGIN_SRC emacs-lisp
  ;;; build-site.el --- Website Build Script Emacs Lisp  -*- lexical-binding: t; -*-

  ;; This file was auto-generated by website.org

  ;; Copyright (C) 2022 Erik P. Almaraz
  ;; License: MIT

  ;;; Code:


#+END_SRC


* Initialization

This script in Emacs Lisp will generate HTML files for Org documents by running a shell command.

#+BEGIN_SRC emacs-lisp

  ;; Set the package installation directory so that packages aren't stored in the
  ;; ~/.emacs.d/elpa path.
  (require 'package)
  (setq package-user-dir (expand-file-name "./.packages"))
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  ;; Initialize the package system
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Install dependencies
  (package-install 'htmlize)

  ;; Load the publishing system
  ;;(require 'org)
  (require 'ox-publish)

#+END_SRC


* Publish Settings

Customize HTML Output.

#+BEGIN_SRC emacs-lisp

  ;; Customize the HTML output
  (setq org-html-validation-link t              ;; Don't not show validation link
        org-html-head-include-scripts nil       ;; Use our own scripts
        org-html-head-include-default-style nil) ;; Use our own styles

  ;; Let's try out a different method.
  ;; org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />")


#+END_SRC

Define Publishing Project

#+BEGIN_SRC emacs-lisp

  ;; Define the publishing project
  (setq org-publish-project-alist
        (list
         (list "org-website"
               :base-directory "./content"
               :base-extension "org"
               :publishing-directory "./docs"
               :recursive t
               :exclude "org-html-themes/.*"
               :publishing-function 'org-html-publish-to-html
               :headline-levels 4   ; default for now
               :with-aurthor t
               :with-creator t
               :with-toc t
               :section-numbers nil
               :time-stamp-file t
               :auto-preamble t)))

  ;; Generate the site output
  (org-publish-all t)

#+END_SRC


* Complete

#+BEGIN_SRC emacs-lisp

  (message "Build complete!")

  ;;; end build-site.el
#+END_SRC
